package utilities;

import java.util.Arrays;

/**
 * Class for wave generation
 */
public class WaveGen {
    // number of points to plot per second
    public static final int SAMPLE_RATE = 16384;

    /*
        Generates sine wave data as doubles for plotting on a graph.
     */
    public static double[] generateSineWave(double amplitude, double frequency, double phase, int seconds){
        int points = seconds * SAMPLE_RATE;
        double[] wave = new double[points];
        double angularFrequency = 2 * Math.PI * frequency / SAMPLE_RATE;
        for(int x = 0; x < points; x++){
            wave[x] = amplitude * Math.sin(angularFrequency * x + phase);
        }
        return wave;
    }

    /*
        Generates the sum of two sine waves for graphing.
            - Assume arrays a and b contain sine wave data generated by the generateSineWave method.
            - Assume arrays a and b are the same size.
     */
    public static double[] sumWaves(double[] a, double[] b){
        assert a.length == b.length; // sanity check
        double[] sum = new double[a.length];
        for(int x = 0; x < a.length; x++){
            sum[x] = a[x] + b[x];
        }
        return sum;
    }

    /*
        Generates sine wave data as bytes for audio playback.
     */
    public static byte[] generateSineWaveBytes(double amplitude, double frequency, double phase, int seconds){
        double[] wave = generateSineWave(amplitude, frequency, phase, seconds);
        byte[] bytes = new byte[wave.length];
        for(int x = 0; x < wave.length; x++){
            // assume amplitude between 0.0 and 1.0. Multiply by 127 and round down to scale to byte array.
            bytes[x] = (byte)(127 * wave[x]);
        }
        return bytes;
    }

    /*
        Generates the sum of two sine wave byte arrays for beat frequency generation.
            - Assume arrays a and b contain sine wave data generated by the generateSineWaveBytes method.
            - Assume arrays a and b are the same size.
     */
    public static byte[] sumByteWaves(byte[] a, byte[] b){
        assert a.length == b.length; // sanity check
        byte[] sum = new byte[a.length];
        for(int x = 0; x < a.length; x++){
            // cast to byte because addition returns an int
            // divide by two to avoid overflowing the bytes
            sum[x] = (byte)((a[x] + b[x]) / 2);
        }
        return sum;
    }

    public static void main(String[] args) {
        byte[] a = generateSineWaveBytes(1.0, 400.0, 0.0, 16);
        System.out.println(Arrays.toString(a));
    }
}
